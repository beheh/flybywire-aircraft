use super::audio::translate_height;
use crate::flight_warning::runtime::audio::{
    SyntheticVoice, SyntheticVoiceFile, SyntheticVoiceManager,
};
use std::collections::HashSet;
use std::time::Duration;
use systems::flight_warning::warnings::WarningCode;
use uom::si::f64::Length;

/*pub(super) struct A320MonitorInput {
    w_34_00_340: bool, // five
    w_34_00_330: bool, // ten
    w_34_00_320: bool, // twenty
    w_34_00_310: bool, // thirty
    w_34_00_300: bool, // forty
    w_34_00_290: bool, // fifty
    w_34_00_280: bool, // one hundred
    w_34_00_280: bool, // two hundred
    w_34_00_280: bool, // three hundred
    w_34_00_280: bool, // one hundred
}*/

pub(super) struct A320MonitorParameters {
    pub(super) radio_height: Length,
    pub(super) intermediate_call_out: bool,
    pub(super) auto_call_out_inhib: bool,
    pub(super) retard_inhibition: bool,
}

impl A320MonitorParameters {
    fn radio_height(&self) -> Length {
        self.radio_height
    }

    fn intermediate_call_out(&self) -> bool {
        self.intermediate_call_out
    }

    fn auto_call_out_inhib(&self) -> bool {
        self.auto_call_out_inhib
    }

    fn retard_inhibition(&self) -> bool {
        self.retard_inhibition
    }
}

pub(super) trait A320FWCMonitorFeedback {
    /// This signal is generated by the Monitor and indicates that an altitude callout just
    /// finished. It is a feedback signal that can be used by the warning logic to determine when
    /// too much time has passed since the last altitude callout.
    fn auto_call_out_generated(&self) -> bool;

    /// This signal indicates that an intermediate altitude callout just completed.
    fn inter_audio(&self) -> bool;
}

/// This struct represents the Flight Warning Computer monitor, which is the component that is
/// ultimately responsible for displaying warnings and emitting sounds. As input it considers the
/// activated warnings and crew actions to decide which warnings should be currently suppressed,
/// cleared, recalled, and how to prioritize the active warnings.
#[derive(Default)]
pub(super) struct A320FWCMonitor {
    cleared: HashSet<WarningCode>,
    canceled: HashSet<WarningCode>,
    synthetic_voice_manager: SyntheticVoiceManager,
    auto_call_out_generated: bool,
    inter_audio: bool,
}

impl A320FWCMonitor {
    pub(super) fn update(
        &mut self,
        delta: Duration,
        parameters: A320MonitorParameters,
        warnings: Vec<WarningCode>,
    ) {
        let mut requested_synthetic_voice: Option<Vec<SyntheticVoice>> = None;

        // reset the callout started pulses
        self.auto_call_out_generated = false;
        self.inter_audio = false;

        if self.synthetic_voice_manager.ready() {
            if warnings.contains(&WarningCode::new(34, 00, 310)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Thirty]);
            } else if warnings.contains(&WarningCode::new(34, 00, 300)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Forty]);
            } else if warnings.contains(&WarningCode::new(34, 00, 290)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Fifty]);
            } else if warnings.contains(&WarningCode::new(34, 00, 280)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::OneHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 270)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::TwoHundred])
            } else if warnings.contains(&WarningCode::new(34, 00, 260)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::ThreeHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 255)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::FourHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 380)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::FiveHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 390)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::OneThousand]);
            } else if warnings.contains(&WarningCode::new(34, 00, 410)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::TwoThousand]);
            } else if warnings.contains(&WarningCode::new(34, 00, 420)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::TwoThousandFiveHundred]);
            } else if !parameters.intermediate_call_out()
                && !parameters.auto_call_out_inhib
                && !parameters.retard_inhibition
            {
                if let Some(intermediate) = translate_height(parameters.radio_height) {
                    // trigger an intermediate callout
                    self.inter_audio = true;
                    requested_synthetic_voice = Some(intermediate);
                }
            }
        }

        self.synthetic_voice_manager
            .update(delta, requested_synthetic_voice)
    }

    fn do_clear(&mut self) {
        // get the current warning code, if any
        let code: Option<WarningCode> = None;

        if let Some(code) = code {
            self.cleared.insert(code);
        }
    }

    fn do_emergency_cancel(&self) {}

    fn check_for_callout(&mut self) {
        let is_stall_requested = false;
        let is_intermediate_callout_requested = false;
    }

    pub(super) fn synthetic_voice_index(&self) -> Option<u8> {
        self.synthetic_voice_manager.callout_sound_id()
    }
}

impl A320FWCMonitorFeedback for A320FWCMonitor {
    fn auto_call_out_generated(&self) -> bool {
        self.auto_call_out_generated
    }

    fn inter_audio(&self) -> bool {
        self.inter_audio
    }
}
