use super::audio::translate_height;
use crate::flight_warning::runtime::audio::{
    SyntheticVoice, SyntheticVoiceFile, SyntheticVoiceManager,
};
use std::collections::{HashMap, HashSet};
use std::time::Duration;
use systems::flight_warning::warnings::WarningCode;
use uom::si::f64::Length;
use uom::si::luminance::candela_per_square_centimeter;

/*pub(super) struct A320MonitorInput {
    w_34_00_340: bool, // five
    w_34_00_330: bool, // ten
    w_34_00_320: bool, // twenty
    w_34_00_310: bool, // thirty
    w_34_00_300: bool, // forty
    w_34_00_290: bool, // fifty
    w_34_00_280: bool, // one hundred
    w_34_00_280: bool, // two hundred
    w_34_00_280: bool, // three hundred
    w_34_00_280: bool, // one hundred
}*/

pub(super) struct A320MonitorParameters {
    pub(super) mw_cancel_pulse_up: bool,
    pub(super) mc_cancel_pulse_up: bool,
    pub(super) radio_height: Length,
    pub(super) intermediate_call_out: bool,
    pub(super) auto_call_out_inhib: bool,
    pub(super) retard_inhibition: bool,
}

impl A320MonitorParameters {
    fn radio_height(&self) -> Length {
        self.radio_height
    }

    fn intermediate_call_out(&self) -> bool {
        self.intermediate_call_out
    }

    fn auto_call_out_inhib(&self) -> bool {
        self.auto_call_out_inhib
    }

    fn retard_inhibition(&self) -> bool {
        self.retard_inhibition
    }
}

pub(super) trait A320FWCMonitorFeedback {
    /// This signal is generated by the Monitor and indicates that "minimum" is currently playing.
    fn minimum_generated(&self) -> bool;

    /// This signal is generated by the Monitor and indicates that "hundred above" is currently
    /// playing.
    fn hundred_above_generated(&self) -> bool;

    /// This signal is generated by the Monitor and indicates that an altitude callout just
    /// finished. It is a feedback signal that can be used by the warning logic to determine when
    /// too much time has passed since the last altitude callout.
    fn auto_call_out_generated(&self) -> bool;

    /// This signal indicates that an intermediate altitude callout just completed.
    fn inter_audio(&self) -> bool;
}

/// This struct represents the Flight Warning Computer monitor, which is the component that is
/// ultimately responsible for displaying warnings and emitting sounds. As input it considers the
/// activated warnings and crew actions to decide which warnings should be currently suppressed,
/// cleared, recalled, and how to prioritize the active warnings.
#[derive(Default)]
pub(super) struct A320FWCMonitor {
    activations: HashMap<WarningCode, Duration>,
    //cleared: HashSet<WarningCode>,
    canceled: HashSet<WarningCode>,
    synthetic_voice_manager: SyntheticVoiceManager,
    c_chord: bool,
    minimum_generated: bool,
    hundred_above_generated: bool,
    auto_call_out_generated: bool,
    inter_audio: bool,
}

impl A320FWCMonitor {
    pub(super) fn update(
        &mut self,
        delta: Duration,
        parameters: A320MonitorParameters,
        requested_warnings: Vec<WarningCode>,
    ) {
        let warnings = self.determine_active_warnings(delta, &requested_warnings);

        // cancel level 3 audio
        if parameters.mw_cancel_pulse_up {
            if warnings.contains(&WarningCode::new(22, 00, 050)) {
                self.canceled.insert(WarningCode::new(22, 00, 050));
            }
        }

        let mut new_cancel = HashSet::new();
        for canceled in self.canceled.drain() {
            // only keep if still active
            if requested_warnings.contains(&canceled) {
                new_cancel.insert(canceled);
            }
        }
        self.canceled = new_cancel;

        // reset the callout started pulses
        // TODO maybe stay true until the sound has finished playing
        self.minimum_generated = false;
        self.hundred_above_generated = false;
        self.auto_call_out_generated = false;
        self.inter_audio = false;

        // no matter if the synthetic voice manager is ready or not,
        let mut requested_synthetic_voice: Option<Vec<SyntheticVoice>> = None;
        let mut cancel_any_playing_synthetic_voice = false;

        if warnings.contains(&WarningCode::new(22, 00, 070)) {
            cancel_any_playing_synthetic_voice = true;
            self.minimum_generated = true;
            self.auto_call_out_generated = true;
            requested_synthetic_voice = Some(vec![SyntheticVoice::Minimum])
        } else if self.synthetic_voice_manager.ready_in(delta) {
            if warnings.contains(&WarningCode::new(34, 00, 360)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![
                    SyntheticVoice::Ten,
                    SyntheticVoice::Pause100,
                    SyntheticVoice::Retard,
                    SyntheticVoice::Pause200,
                ]);
            } else if warnings.contains(&WarningCode::new(34, 00, 350)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![
                    SyntheticVoice::Twenty,
                    SyntheticVoice::Pause50,
                    SyntheticVoice::Retard,
                    SyntheticVoice::Pause200,
                ]);
            } else if warnings.contains(&WarningCode::new(34, 00, 370)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice =
                    Some(vec![SyntheticVoice::Retard, SyntheticVoice::Pause600]);
            } else if warnings.contains(&WarningCode::new(22, 00, 060)) {
                self.hundred_above_generated = true;
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::HundredAbove])
            } else if warnings.contains(&WarningCode::new(34, 00, 340)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Five]);
            } else if warnings.contains(&WarningCode::new(34, 00, 330)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Ten]);
            } else if warnings.contains(&WarningCode::new(34, 00, 320)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Twenty]);
            } else if warnings.contains(&WarningCode::new(34, 00, 310)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Thirty]);
            } else if warnings.contains(&WarningCode::new(34, 00, 300)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Forty]);
            } else if warnings.contains(&WarningCode::new(34, 00, 290)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::Fifty]);
            } else if warnings.contains(&WarningCode::new(34, 00, 280)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::OneHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 270)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::TwoHundred])
            } else if warnings.contains(&WarningCode::new(34, 00, 260)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::ThreeHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 255)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::FourHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 380)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::FiveHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 390)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::OneThousand]);
            } else if warnings.contains(&WarningCode::new(34, 00, 410)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::TwoThousand]);
            } else if warnings.contains(&WarningCode::new(34, 00, 400)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::TwentyFiveHundred]);
            } else if warnings.contains(&WarningCode::new(34, 00, 420)) {
                self.auto_call_out_generated = true;
                requested_synthetic_voice = Some(vec![SyntheticVoice::TwoThousandFiveHundred]);
            } else if !parameters.intermediate_call_out()
                && !parameters.auto_call_out_inhib
                && !parameters.retard_inhibition
            {
                if let Some(intermediate) = translate_height(parameters.radio_height) {
                    // trigger an intermediate callout
                    self.inter_audio = true;
                    requested_synthetic_voice = Some(intermediate);
                }
            }
        }

        self.synthetic_voice_manager.update(
            delta,
            requested_synthetic_voice,
            cancel_any_playing_synthetic_voice,
        );

        self.c_chord = warnings.contains(&WarningCode::new(22, 00, 050));
    }

    fn determine_active_warnings(
        &mut self,
        delta: Duration,
        activated_warnings: &Vec<WarningCode>,
    ) -> Vec<WarningCode> {
        // drop warnings that are no longer activated
        self.activations
            .retain(|activation, _| activated_warnings.contains(activation));

        // add new warnings
        for warning in activated_warnings.into_iter() {
            if self.activations.contains_key(warning) {
                *self.activations.get_mut(warning).unwrap() += delta;
            } else {
                self.activations.insert(*warning, Duration::ZERO);
            }
        }

        let mut active = vec![];
        for (code, duration) in self.activations.iter() {
            let activation_delay = if code != &WarningCode::new(22, 00, 050) {
                Duration::ZERO
            } else {
                Duration::from_millis(300)
            };
            if duration >= &activation_delay && !self.canceled.contains(code) {
                active.push(*code);
            }
        }

        active
    }

    pub(super) fn synthetic_voice_index(&self) -> Option<u8> {
        self.synthetic_voice_manager.callout_sound_id()
    }

    pub(super) fn c_chord(&self) -> bool {
        self.c_chord
    }
}

impl A320FWCMonitorFeedback for A320FWCMonitor {
    fn auto_call_out_generated(&self) -> bool {
        self.auto_call_out_generated
    }

    fn minimum_generated(&self) -> bool {
        self.minimum_generated
    }

    fn hundred_above_generated(&self) -> bool {
        self.hundred_above_generated
    }

    fn inter_audio(&self) -> bool {
        self.inter_audio
    }
}
